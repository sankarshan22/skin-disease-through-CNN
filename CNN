#!/usr/bin/env python
# coding: utf-8

# In[20]:


# Import required libraries
import os
import numpy as np
import pickle
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from PIL import Image


# In[35]:




# Paths to datasets
train_path = r"../../archive/skin-disease-datasaet/train_set"
test_path = r"../../archive/skin-disease-datasaet/test_set"

# Check dataset paths
if not os.path.exists(train_path) or not os.path.exists(test_path):
    raise FileNotFoundError("Please check your dataset paths!")

# Step 1: Load and preprocess data
def load_images(folder_path, image_size=(64, 64)):
    images = []
    labels = []
    for disease_name in os.listdir(folder_path):
        disease_folder = os.path.join(folder_path, disease_name)
        if os.path.isdir(disease_folder):
            
            count=0
            for image_name in os.listdir(disease_folder):
                image_path = os.path.join(disease_folder, image_name)
                try:
                    image = Image.open(image_path).resize(image_size).convert('RGB')
                    images.append(np.array(image))
                    labels.append(disease_name)
                    count = count+1
                except Exception as e:
                    print(f"Could not load image {image_name}: {e}")
            print(f"Loading images for: {disease_name} number of images: {count}")
    return np.array(images), np.array(labels)

def preprocess_data(images, labels):
    images = images.astype('float32') / 255.0
    label_encoder = LabelEncoder()
    encoded_labels = label_encoder.fit_transform(labels)
    one_hot_labels = to_categorical(encoded_labels)
    return images, one_hot_labels, label_encoder

# Step 2: Define the CNN model class
class CNNModel:
    def _init_(self, input_shape, num_classes):
        self.model = Sequential([
            Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
            MaxPooling2D((2, 2)),
            Conv2D(64, (3, 3), activation='relu'),
            MaxPooling2D((2, 2)),
            Flatten(),
            Dense(128, activation='relu'),
            Dropout(0.5),
            Dense(num_classes, activation='softmax')
        ])
        self.model.compile(optimizer='adam', 
                           loss='categorical_crossentropy', 
                           metrics=['accuracy'])

    def train(self, X_train, y_train, X_val, y_val, batch_size=32, epochs=10):
        datagen = ImageDataGenerator(rotation_range=10, zoom_range=0.1, horizontal_flip=True)
        datagen.fit(X_train)
        history = self.model.fit(
            datagen.flow(X_train, y_train, batch_size=batch_size),
            validation_data=(X_val, y_val),
            epochs=epochs,
            verbose=1
        )
        return history

    def save(self, model_path, label_encoder_path, label_encoder):
        self.model.save(model_path)
        with open(label_encoder_path, "wb") as f:
            pickle.dump(label_encoder, f)

# Step 3: Train the model
def train():
    # Load training and testing data
    print("Loading training images...")
    train_images, train_labels = load_images(train_path)
    print("Loading test images...")
    test_images, test_labels = load_images(test_path)

    # Preprocess data
    print("Preprocessing data...")
    X_train, y_train, label_encoder = preprocess_data(train_images, train_labels)
    X_test, y_test, _ = preprocess_data(test_images, test_labels)

    # Define model input shape and number of classes
    input_shape = X_train.shape[1:]
    num_classes = y_train.shape[1]

    print("Creating and training the model...")
    model = CNNModel(input_shape, num_classes)
    history = model.train(X_train, y_train, X_test, y_test, epochs=40, batch_size=32)

    # Evaluate the model
    test_loss, test_acc = model.model.evaluate(X_test, y_test, verbose=0)
    print(f"Test Accuracy: {test_acc:.4f}")

    # Save the model and label encoder
    model.save("cnn_model.h5", "label_encoder.pkl", label_encoder)

    # Plot training history
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'], label='Train Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.legend()
    plt.title("Loss")

    plt.subplot(1, 2, 2)
    plt.plot(history.history['accuracy'], label='Train Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.legend()
    plt.title("Accuracy")

    plt.show()

# Step 4: Prediction function

# Add this new function to the backend
def predict_from_array(image_array):
    try:
        # Load the trained model
        model = load_model("cnn_model.h5")
        print("Model loaded successfully.")

        # Load the label encoder
        with open("label_encoder.pkl", "rb") as f:
            label_encoder = pickle.load(f)
        print("Label encoder loaded successfully.")

        # Make a prediction
        prediction = model.predict(image_array)
        print(f"Raw model prediction: {prediction}")

        # Decode the predicted class
        predicted_class = label_encoder.inverse_transform([np.argmax(prediction)])
        return predicted_class[0]

    except Exception as e:
        print(f"An error occurred: {e}")
        return None


# In[36]:


# In[32]:


# image_path = r"C:\Users\allur\Project\archive\skin-disease-datasaet\train_set\BA- cellulitis\BA- cellulitis (1).jpg"
# predicted_class = predict(image_path)
# if predicted_class:
#     print(f"The predicted class is: {predicted_class}")
# else:
#     print("Prediction failed. Please check for errors.")
